generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  clerkId         String            @unique
  email           String?
  name            String?
  createdAt       DateTime          @default(now())
  payments        Payment[]
  wallets         Wallet[]
  paymentSessions PaymentSession[]
}

model Wallet {
  id        String   @id @default(uuid())
  address   String   // Remove @unique to allow multiple users per wallet
  signature String?  // Add signature field for verification
  isActive  Boolean  @default(true)  // Add active status
  isPrimary Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  
  // Add unique constraint on userId + address combination
  @@unique([userId, address])
}

model Payment {
  id           String            @id @default(uuid())
  sessionId    String            @unique
  amount       Float
  token        String
  status       String            @default("PENDING")
  store        String?
  brand        String?
  giftCardCode String?
  txHash       String?
  userId       String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  user         User?             @relation(fields: [userId], references: [id])
  refi         RefiContribution?
  giftCard     GiftCard?
}

model RefiContribution {
  id        String   @id @default(uuid())
  paymentId String   @unique
  amount    Float
  txHash    String?
  createdAt DateTime @default(now())
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

// Indexed blockchain transaction data
model IndexedPayment {
  id             String   @id
  payer          String
  amount         String
  currency       String
  sessionId      String
  timestamp      Int
  blockNumber    BigInt
  transactionHash String
  logIndex       Int
  createdAt      DateTime @default(now())
}

model IndexedWithdrawal {
  id             String   @id
  to             String
  amount         String
  currency       String
  timestamp      Int
  blockNumber    BigInt
  transactionHash String
  logIndex       Int
  createdAt      DateTime @default(now())
}

model IndexedUser {
  id            String   @id
  address       String   @unique
  totalPaid     String
  paymentCount  Int
  firstPaymentAt DateTime?
  lastPaymentAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model GlobalStats {
  id            String   @id
  totalPayments Int
  totalVolume   String
  uniqueUsers   Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

// Gift card inventory
model GiftCard {
  id          String   @id @default(uuid())
  name        String   // Gift card name (e.g., "Amazon Gift Card")
  amount      Float    // Gift card value
  currency    String   // Currency (USD, INR, etc.)
  provider    String   // Provider (amazon, flipkart, etc.)
  code        String   @unique // Gift card code
  pin         String?  // PIN if required
  isUsed      Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paymentId   String?  @unique // Link to payment that used this gift card
  payment     Payment? @relation(fields: [paymentId], references: [id])
}

// Payment sessions for security
model PaymentSession {
  id          String   @id @default(uuid())
  sessionId   String   @unique
  isActive    Boolean  @default(true)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
}